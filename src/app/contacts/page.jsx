'use client';

import { useState, useEffect, useRef } from 'react';
import Link from 'next/link';
import { motion, AnimatePresence } from 'framer-motion';
import { useTelegram } from '@/src/hooks/useTelegram';
import { useLanguageStore } from '@/src/store/language';
import { SocialLinks } from '@/src/components/shared/Home/SocialLinks';

// –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
const contactsLocalization = {
  ru: {
    hero: {
      title: '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏',
      subtitle: '–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –æ–±—â–µ–Ω–∏—é —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏'
    },
    contactInfo: {
      title: '–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã',
      address: '—É–ª. –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è, 123, –≥. –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è, 123456',
      email: 'info@carsale.com',
      phone: '+7 (495) 123-45-67',
      schedule: {
        title: '–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:',
        weekdays: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞: 9:00 - 18:00',
        weekend: '–°—É–±–±–æ—Ç–∞: 10:00 - 15:00',
        dayoff: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: –≤—ã—Ö–æ–¥–Ω–æ–π'
      }
    },
    departments: {
      title: '–ù–∞—à–∏ –æ—Ç–¥–µ–ª—ã',
      list: [
        {
          name: '–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂',
          phone: '+7 (495) 123-45-68',
          email: 'sales@carsale.com',
          icon: 'üöó'
        },
        {
          name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
          phone: '+7 (495) 123-45-69',
          email: 'support@carsale.com',
          icon: 'üõ†Ô∏è'
        },
        {
          name: '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è',
          phone: '+7 (495) 123-45-70',
          email: 'accounting@carsale.com',
          icon: 'üìä'
        },
        {
          name: '–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
          phone: '+7 (495) 123-45-71',
          email: 'partners@carsale.com',
          icon: 'ü§ù'
        }
      ]
    },
    form: {
      title: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
      name: '–í–∞—à–µ –∏–º—è',
      email: 'Email',
      subject: '–¢–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è',
      department: '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª',
      departments: [
        { value: 'sales', label: '–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂' },
        { value: 'support', label: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞' },
        { value: 'accounting', label: '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è' },
        { value: 'partners', label: '–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞' },
        { value: 'other', label: '–î—Ä—É–≥–æ–µ' }
      ],
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ',
      agreement: '–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
      send: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
      successTitle: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
      successMessage: '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
      backToForm: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ñ–æ—Ä–º–µ'
    },
    faq: {
      title: '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
      items: [
        {
          question: '–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã?',
          answer: '–ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –≤ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏. –í –≤—ã—Ö–æ–¥–Ω—ã–µ –∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–æ.'
        },
        {
          question: '–ú–æ–∂–Ω–æ –ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã?',
          answer: '–î–∞, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é, –∑–∞–ø–æ–ª–Ω–∏–≤ —Ñ–æ—Ä–º—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "–î–µ–º–æ" –∏–ª–∏ —Å–≤—è–∑–∞–≤—à–∏—Å—å —Å –Ω–∞—à–∏–º –æ—Ç–¥–µ–ª–æ–º –ø—Ä–æ–¥–∞–∂ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ email.'
        },
        {
          question: '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏?',
          answer: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å 10:00 –¥–æ 15:00 –≤ —Å—É–±–±–æ—Ç—É. –í –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.'
        },
        {
          question: '–ö–∞–∫ —Å—Ç–∞—Ç—å –≤–∞—à–∏–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?',
          answer: '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –æ—Ç–¥–µ–ª–æ–º –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏ –ø–æ email partners@carsale.com –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞".'
        }
      ]
    },
    map: {
      title: '–ú—ã –Ω–∞ –∫–∞—Ä—Ç–µ',
      findUs: '–ö–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏'
    },
    social: {
      title: '–ú—ã –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö',
      followUs: '–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π'
    }
  },
  en: {
    // English localization
  },
  uz: {
    // Uzbek localization
  }
};

export default function ContactsPage() {
  const { hapticFeedback } = useTelegram();
  const { currentLocale } = useLanguageStore();
  const [mounted, setMounted] = useState(false);
  const [formSubmitted, setFormSubmitted] = useState(false);
  const [expandedFaqs, setExpandedFaqs] = useState([]);
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    subject: '',
    department: '',
    message: '',
    agreement: false
  });
  const [errors, setErrors] = useState({});
  
  const mapRef = useRef(null);
  
  // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
  const t = contactsLocalization[currentLocale || 'ru'] || contactsLocalization.ru;
  
  useEffect(() => {
    setMounted(true);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã
    const loadMap = () => {
      if (mapRef.current) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã (Google Maps, –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã –∏ —Ç.–¥.)
        const mapContainer = mapRef.current;
        mapContainer.innerHTML = `
          <div class="bg-gray-200 dark:bg-gray-700 h-full w-full flex items-center justify-center">
            <div class="text-center">
              <div class="animate-ping inline-block w-3 h-3 bg-primary rounded-full mr-1"></div>
              <div class="animate-ping inline-block w-3 h-3 bg-primary rounded-full animation-delay-200 mr-1"></div>
              <div class="animate-ping inline-block w-3 h-3 bg-primary rounded-full animation-delay-500"></div>
              <p class="mt-4 text-gray-600 dark:text-gray-300">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</p>
            </div>
          </div>
        `;
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          mapContainer.innerHTML = `
            <div class="relative h-full w-full bg-gray-100 dark:bg-gray-800">
              <img src="https://maps.googleapis.com/maps/api/staticmap?center=Moscow,Russia&zoom=15&size=600x400&key=YOUR_API_KEY" alt="Map" class="w-full h-full object-cover opacity-60 dark:opacity-30" />
              <div class="absolute inset-0 flex items-center justify-center">
                <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700">
                  <div class="flex items-start">
                    <div class="w-10 h-10 rounded-full bg-primary flex items-center justify-center text-white">
                      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                      </svg>
                    </div>
                    <div class="ml-3">
                      <p class="text-sm font-medium text-gray-900 dark:text-white">Car-Sale Headquarters</p>
                      <p class="text-xs text-gray-600 dark:text-gray-300">${t.contactInfo.address}</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          `;
        }, 1500);
      }
    };
    
    loadMap();
  }, []);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–µ
  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData({
      ...formData,
      [name]: type === 'checkbox' ? checked : value
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[name]) {
      setErrors({
        ...errors,
        [name]: null
      });
    }
  };
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.name.trim()) {
      newErrors.name = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è';
    }
    
    if (!formData.email.trim()) {
      newErrors.email = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
    }
    
    if (!formData.subject.trim()) {
      newErrors.subject = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è';
    }
    
    if (!formData.department) {
      newErrors.department = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª';
    }
    
    if (!formData.message.trim()) {
      newErrors.message = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
    }
    
    if (!formData.agreement) {
      newErrors.agreement = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (validateForm()) {
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
      setTimeout(() => {
        setFormSubmitted(true);
        if (hapticFeedback) hapticFeedback('impact');
      }, 1000);
    } else {
      // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
      const firstError = Object.keys(errors)[0];
      if (firstError) {
        const element = document.getElementById(firstError);
        if (element) {
          element.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }
      
      if (hapticFeedback) hapticFeedback('notification');
    }
  };
  
  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
  const resetForm = () => {
    setFormData({
      name: '',
      email: '',
      subject: '',
      department: '',
      message: '',
      agreement: false
    });
    setFormSubmitted(false);
  };
  
  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ FAQ
  const toggleFaq = (index) => {
    if (expandedFaqs.includes(index)) {
      setExpandedFaqs(expandedFaqs.filter(i => i !== index));
    } else {
      setExpandedFaqs([...expandedFaqs, index]);
    }
    
    if (hapticFeedback) hapticFeedback('selection');
  };

  if (!mounted) {
    return null;
  }

  return (
    <div className="bg-white dark:bg-gray-900 min-h-screen">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="relative bg-gradient-to-r from-primary/90 to-primary-dark dark:from-primary-dark/90 dark:to-primary-dark/70 text-white overflow-hidden">
        {/* –§–æ–Ω–æ–≤—ã–π —É–∑–æ—Ä */}
        <div className="absolute inset-0 opacity-10">
          <svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">
            <defs>
              <pattern id="dots" width="20" height="20" patternUnits="userSpaceOnUse">
                <circle cx="10" cy="10" r="2" fill="white" />
              </pattern>
            </defs>
            <rect width="100%" height="100%" fill="url(#dots)" />
          </svg>
        </div>
        
        <div className="container mx-auto px-6 py-20">
          <motion.h1 
            className="text-3xl md:text-5xl font-bold mb-4 text-center"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
          >
            {t.hero.title}
          </motion.h1>
          <motion.p
            className="text-lg md:text-xl text-center max-w-2xl mx-auto opacity-90"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.6, delay: 0.2 }}
          >
            {t.hero.subtitle}
          </motion.p>
        </div>
        
        {/* –í–æ–ª–Ω–∏—Å—Ç—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
        <div className="absolute bottom-0 left-0 right-0 h-16 text-white dark:text-gray-900">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320" className="absolute bottom-0 w-full h-full">
            <path fill="currentColor" fillOpacity="1" d="M0,160L48,149.3C96,139,192,117,288,128C384,139,480,181,576,186.7C672,192,768,160,864,138.7C960,117,1056,107,1152,112C1248,117,1344,139,1392,149.3L1440,160L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z"></path>
          </svg>
        </div>
      </div>
      
      {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
      <div className="container mx-auto px-4 py-12">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ */}
          <div className="lg:col-span-1">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
              className="bg-white dark:bg-gray-800 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden"
            >
              <div className="bg-gradient-to-r from-primary to-primary-dark dark:from-primary dark:to-primary-dark p-6 text-white">
                <h2 className="text-xl font-bold">{t.contactInfo.title}</h2>
              </div>
              
              <div className="p-6 space-y-6">
                <div className="flex">
                  <div className="flex-shrink-0 w-10 h-10 rounded-full bg-primary/10 dark:bg-primary/20 flex items-center justify-center text-primary dark:text-primary-light">
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                    </svg>
                  </div>
                  <div className="ml-4">
                    <h3 className="text-sm font-medium text-gray-900 dark:text-white">–ê–¥—Ä–µ—Å</h3>
                    <p className="text-sm text-gray-600 dark:text-gray-300 mt-1">{t.contactInfo.address}</p>
                  </div>
                </div>
                
                <div className="flex">
                  <div className="flex-shrink-0 w-10 h-10 rounded-full bg-primary/10 dark:bg-primary/20 flex items-center justify-center text-primary dark:text-primary-light">
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                    </svg>
                  </div>
                  <div className="ml-4">
                    <h3 className="text-sm font-medium text-gray-900 dark:text-white">Email</h3>
                    <p className="text-sm text-gray-600 dark:text-gray-300 mt-1">
                      <a href={`mailto:${t.contactInfo.email}`} className="hover:text-primary dark:hover:text-primary-light">
                        {t.contactInfo.email}
                      </a>
                    </p>
                  </div>
                </div>
                
                <div className="flex">
                  <div className="flex-shrink-0 w-10 h-10 rounded-full bg-primary/10 dark:bg-primary/20 flex items-center justify-center text-primary dark:text-primary-light">
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                    </svg>
                  </div>
                  <div className="ml-4">
                    <h3 className="text-sm font-medium text-gray-900 dark:text-white">–¢–µ–ª–µ—Ñ–æ–Ω</h3>
                    <p className="text-sm text-gray-600 dark:text-gray-300 mt-1">
                      <a href={`tel:${t.contactInfo.phone}`} className="hover:text-primary dark:hover:text-primary-light">
                        {t.contactInfo.phone}
                      </a>
                    </p>
                  </div>
                </div>
                
                <div className="flex">
                  <div className="flex-shrink-0 w-10 h-10 rounded-full bg-primary/10 dark:bg-primary/20 flex items-center justify-center text-primary dark:text-primary-light">
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div className="ml-4">
                    <h3 className="text-sm font-medium text-gray-900 dark:text-white">{t.contactInfo.schedule.title}</h3>
                    <p className="text-sm text-gray-600 dark:text-gray-300 mt-1">{t.contactInfo.schedule.weekdays}</p>
                    <p className="text-sm text-gray-600 dark:text-gray-300">{t.contactInfo.schedule.weekend}</p>
                    <p className="text-sm text-gray-600 dark:text-gray-300">{t.contactInfo.schedule.dayoff}</p>
                  </div>
                </div>
              </div>
            </motion.div>
            
            {/* –ö–∞—Ä—Ç–∞ */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: 0.2 }}
              className="mt-8 bg-white dark:bg-gray-800 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden"
            >
              <div className="bg-gradient-to-r from-gray-700 to-gray-900 p-6 text-white">
                <h2 className="text-xl font-bold">{t.map.title}</h2>
              </div>
              
              <div className="h-[300px]" ref={mapRef}>
                {/* –ö–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é JavaScript */}
              </div>
              
              <div className="p-4 bg-gray-50 dark:bg-gray-800/50 border-t border-gray-200 dark:border-gray-700">
                <h3 className="text-base font-medium text-gray-900 dark:text-white mb-2">{t.map.findUs}</h3>
                <p className="text-sm text-gray-600 dark:text-gray-300">
                  –ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞, –≤ 5 –º–∏–Ω—É—Ç–∞—Ö —Ö–æ–¥—å–±—ã –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è". –í—Ö–æ–¥ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –≥–ª–∞–≤–Ω–æ–π —É–ª–∏—Ü—ã, 2 —ç—Ç–∞–∂ –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä–∞ "–ú–æ—Ç–æ—Ä".
                </p>
              </div>
            </motion.div>
            
            {/* –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: 0.4 }}
              className="mt-8 bg-white dark:bg-gray-800 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden"
            >
              <div className="bg-gradient-to-r from-blue-600 to-blue-800 p-6 text-white">
                <h2 className="text-xl font-bold">{t.social.title}</h2>
              </div>
              
              <div className="p-6">
                <p className="text-gray-600 dark:text-gray-300 mb-4">{t.social.followUs}</p>
                <div className="flex justify-center">
                  <SocialLinks />
                </div>
              </div>
            </motion.div>
          </div>
          
          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ñ–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –æ—Ç–¥–µ–ª—ã */}
          <div className="lg:col-span-2">
            {/* –û—Ç–¥–µ–ª—ã */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
              className="bg-white dark:bg-gray-800 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden mb-8"
            >
              <div className="bg-gradient-to-r from-gray-800 to-gray-900 p-6 text-white">
                <h2 className="text-xl font-bold">{t.departments.title}</h2>
              </div>
              
              <div className="p-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {t.departments.list.map((department, index) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.5, delay: 0.1 * index + 0.2 }}
                      className="bg-gray-50 dark:bg-gray-800/50 rounded-xl p-4 border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow"
                    >
                      <div className="flex items-center mb-3">
                        <span className="text-2xl mr-3">{department.icon}</span>
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                          {department.name}
                        </h3>
                      </div>
                      <div className="space-y-2 ml-10">
                        <div className="flex items-center">
                          <svg className="w-4 h-4 text-primary dark:text-primary-light mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                          </svg>
                          <a href={`tel:${department.phone}`} className="text-gray-700 dark:text-gray-300 hover:text-primary dark:hover:text-primary-light">
                            {department.phone}
                          </a>
                        </div>
                        <div className="flex items-center">
                          <svg className="w-4 h-4 text-primary dark:text-primary-light mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                          </svg>
                          <a href={`mailto:${department.email}`} className="text-gray-700 dark:text-gray-300 hover:text-primary dark:hover:text-primary-light">
                            {department.email}
                          </a>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            </motion.div>
            
            {/* –§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: 0.2 }}
              className="bg-white dark:bg-gray-800 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden"
            >
              <div className="bg-gradient-to-r from-primary to-primary-dark dark:from-primary dark:to-primary-dark p-6 text-white">
                <h2 className="text-xl font-bold">{t.form.title}</h2>
              </div>
              
              <div className="p-6">
                <AnimatePresence mode="wait">
                  {formSubmitted ? (
                    <motion.div
                      initial={{ opacity: 0, scale: 0.9 }}
                      animate={{ opacity: 1, scale: 1 }}
                      exit={{ opacity: 0, scale: 0.9 }}
                      className="py-12 text-center"
                    >
                    <div className="w-20 h-20 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center mx-auto mb-4">
                        <svg className="w-10 h-10 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                        </svg>
                      </div>
                      <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
                        {t.form.successTitle}
                      </h3>
                      <p className="text-gray-600 dark:text-gray-300 mb-8">
                        {t.form.successMessage}
                      </p>
                      <motion.button
                        onClick={resetForm}
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        className="px-6 py-2 bg-primary hover:bg-primary-dark text-white font-medium rounded-lg shadow inline-flex items-center"
                      >
                        <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                        </svg>
                        {t.form.backToForm}
                      </motion.button>
                    </motion.div>
                  ) : (
                    <motion.form
                      initial={{ opacity: 1 }}
                      animate={{ opacity: 1 }}
                      exit={{ opacity: 0 }}
                      onSubmit={handleSubmit}
                      className="space-y-6"
                    >
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        {/* –ò–º—è */}
                        <div>
                          <label htmlFor="name" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            {t.form.name} <span className="text-red-500">*</span>
                          </label>
                          <input 
                            type="text" 
                            id="name" 
                            name="name"
                            value={formData.name}
                            onChange={handleInputChange}
                            className={`w-full px-4 py-3 rounded-lg border ${
                              errors.name 
                                ? 'border-red-500 dark:border-red-500 bg-red-50 dark:bg-red-900/10' 
                                : 'border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700'
                            } text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary dark:focus:ring-primary-light`}
                          />
                          {errors.name && (
                            <p className="mt-1 text-sm text-red-500">{errors.name}</p>
                          )}
                        </div>
                        
                        {/* Email */}
                        <div>
                          <label htmlFor="email" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            {t.form.email} <span className="text-red-500">*</span>
                          </label>
                          <input 
                            type="email" 
                            id="email" 
                            name="email"
                            value={formData.email}
                            onChange={handleInputChange}
                            className={`w-full px-4 py-3 rounded-lg border ${
                              errors.email 
                                ? 'border-red-500 dark:border-red-500 bg-red-50 dark:bg-red-900/10' 
                                : 'border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700'
                            } text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary dark:focus:ring-primary-light`}
                          />
                          {errors.email && (
                            <p className="mt-1 text-sm text-red-500">{errors.email}</p>
                          )}
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        {/* –¢–µ–º–∞ */}
                        <div>
                          <label htmlFor="subject" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            {t.form.subject} <span className="text-red-500">*</span>
                          </label>
                          <input 
                            type="text" 
                            id="subject" 
                            name="subject"
                            value={formData.subject}
                            onChange={handleInputChange}
                            className={`w-full px-4 py-3 rounded-lg border ${
                              errors.subject 
                                ? 'border-red-500 dark:border-red-500 bg-red-50 dark:bg-red-900/10' 
                                : 'border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700'
                            } text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary dark:focus:ring-primary-light`}
                          />
                          {errors.subject && (
                            <p className="mt-1 text-sm text-red-500">{errors.subject}</p>
                          )}
                        </div>
                        
                        {/* –û—Ç–¥–µ–ª */}
                        <div>
                          <label htmlFor="department" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            {t.form.department} <span className="text-red-500">*</span>
                          </label>
                          <select 
                            id="department" 
                            name="department"
                            value={formData.department}
                            onChange={handleInputChange}
                            className={`w-full px-4 py-3 rounded-lg border ${
                              errors.department 
                                ? 'border-red-500 dark:border-red-500 bg-red-50 dark:bg-red-900/10' 
                                : 'border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700'
                            } text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary dark:focus:ring-primary-light`}
                          >
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª</option>
                            {t.form.departments.map((dept, index) => (
                              <option key={index} value={dept.value}>{dept.label}</option>
                            ))}
                          </select>
                          {errors.department && (
                            <p className="mt-1 text-sm text-red-500">{errors.department}</p>
                          )}
                        </div>
                      </div>
                      
                      {/* –°–æ–æ–±—â–µ–Ω–∏–µ */}
                      <div>
                        <label htmlFor="message" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                          {t.form.message} <span className="text-red-500">*</span>
                        </label>
                        <textarea 
                          id="message" 
                          name="message"
                          rows="5"
                          value={formData.message}
                          onChange={handleInputChange}
                          className={`w-full px-4 py-3 rounded-lg border ${
                            errors.message 
                              ? 'border-red-500 dark:border-red-500 bg-red-50 dark:bg-red-900/10' 
                              : 'border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700'
                          } text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary dark:focus:ring-primary-light`}
                        >
                        </textarea>
                        {errors.message && (
                          <p className="mt-1 text-sm text-red-500">{errors.message}</p>
                        )}
                      </div>
                      
                      {/* –°–æ–≥–ª–∞—Å–∏–µ */}
                      <div>
                        <div className="flex items-start">
                          <input 
                            type="checkbox" 
                            id="agreement" 
                            name="agreement"
                            checked={formData.agreement}
                            onChange={handleInputChange}
                            className={`w-4 h-4 mt-1 rounded border ${
                              errors.agreement 
                                ? 'border-red-500 dark:border-red-500 bg-red-50 dark:bg-red-900/10' 
                                : 'border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700'
                            } text-primary focus:ring-primary`}
                          />
                          <label htmlFor="agreement" className="ml-2 text-sm text-gray-600 dark:text-gray-400">
                            {t.form.agreement}
                          </label>
                        </div>
                        {errors.agreement && (
                          <p className="mt-1 text-sm text-red-500">{errors.agreement}</p>
                        )}
                      </div>
                      
                      {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
                      <div className="pt-4">
                        <motion.button
                          type="submit"
                          whileHover={{ scale: 1.02 }}
                          whileTap={{ scale: 0.98 }}
                          className="w-full md:w-auto px-8 py-3 bg-primary hover:bg-primary-dark text-white font-semibold rounded-lg shadow-md transition-colors flex items-center justify-center"
                        >
                          {t.form.send}
                          <svg className="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                          </svg>
                        </motion.button>
                      </div>
                    </motion.form>
                  )}
                </AnimatePresence>
              </div>
            </motion.div>
            
            {/* FAQ —Å–µ–∫—Ü–∏—è */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: 0.4 }}
              className="mt-8 bg-white dark:bg-gray-800 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden"
            >
              <div className="bg-gradient-to-r from-gray-800 to-gray-900 p-6 text-white">
                <h2 className="text-xl font-bold">{t.faq.title}</h2>
              </div>
              
              <div className="p-6">
                <div className="space-y-4">
                  {t.faq.items.map((faq, index) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.4, delay: index * 0.1 }}
                      className="bg-gray-50 dark:bg-gray-800/50 rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden"
                    >
                      <button
                        onClick={() => toggleFaq(index)}
                        className="w-full px-6 py-4 text-left font-medium text-gray-900 dark:text-white flex justify-between items-center"
                      >
                        <span>{faq.question}</span>
                        <svg
                          className={`w-5 h-5 text-gray-500 dark:text-gray-400 transition-transform ${expandedFaqs.includes(index) ? 'rotate-180' : ''}`}
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7" />
                        </svg>
                      </button>
                      
                      <AnimatePresence>
                        {expandedFaqs.includes(index) && (
                          <motion.div
                            initial={{ opacity: 0, height: 0 }}
                            animate={{ opacity: 1, height: 'auto' }}
                            exit={{ opacity: 0, height: 0 }}
                            transition={{ duration: 0.3 }}
                          >
                            <div className="px-6 pb-4 text-gray-700 dark:text-gray-300">
                              {faq.answer}
                            </div>
                          </motion.div>
                        )}
                      </AnimatePresence>
                    </motion.div>
                  ))}
                </div>
              </div>
            </motion.div>
          </div>
        </div>
      </div>
      
      {/* –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div className="bg-gray-50 dark:bg-gray-800/30 py-16 px-4 mt-16">
        <div className="container mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
            className="max-w-3xl mx-auto text-center"
          >
            <h2 className="text-2xl md:text-3xl font-bold text-gray-900 dark:text-white mb-4">
              –ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?
            </h2>
            <p className="text-gray-600 dark:text-gray-300 mb-8">
              –ú—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–±–æ–º –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—Å –ª–∏—á–Ω–æ.
            </p>
            <div className="flex flex-wrap justify-center gap-4">
              <Link href="/demo">
                <motion.a
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className="px-8 py-3 bg-primary hover:bg-primary-dark text-white font-medium rounded-full shadow-lg inline-flex items-center"
                >
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                  </svg>
                  –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
                </motion.a>
              </Link>
              <Link href="/partners">
                <motion.a
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className="px-8 py-3 bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 border border-gray-200 dark:border-gray-700 font-medium rounded-full inline-flex items-center"
                >
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 4a2 2 0 114 0v1a1 1 0 001 1h3a1 1 0 011 1v3a1 1 0 01-1 1h-1a2 2 0 100 4h1a1 1 0 011 1v3a1 1 0 01-1 1h-3a1 1 0 01-1-1v-1a2 2 0 10-4 0v1a1 1 0 01-1 1H7a1 1 0 01-1-1v-3a1 1 0 00-1-1H4a2 2 0 110-4h1a1 1 0 001-1V7a1 1 0 011-1h3a1 1 0 001-1V4z" />
                  </svg>
                  –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º
                </motion.a>
              </Link>
            </div>
          </motion.div>
        </div>
      </div>
      
      {/* –°—Ç–∏–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
      <style jsx global>{`
        /* –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–æ—Å—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è Chrome, Safari –∏ Opera */
        .hide-scrollbar::-webkit-scrollbar {
          display: none;
        }
        
        /* –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–æ—Å—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è IE, Edge –∏ Firefox */
        .hide-scrollbar {
          -ms-overflow-style: none;  /* IE –∏ Edge */
          scrollbar-width: none;  /* Firefox */
        }
        
        /* –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π */
        .animation-delay-200 {
          animation-delay: 0.2s;
        }
        
        .animation-delay-500 {
          animation-delay: 0.5s;
        }
      `}</style>
    </div>
  );
}